//T[i]: 정점 i에 도달하는데 걸리는 최단거리
//for i - 0 ~ n 

//  (1) T[i]중 최솟값을 정한다. 단 지금까지 최솟값으로 뽑히지 않았던 값들 중
//  (2) index로부터 뻗어나간다. T[index] + cost  

#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 100;

vector <int> graph[MAX];
vector <int> cost[MAX];

int n , m , start , end2;
int Table[MAX];
bool Check[MAX]; //Check[i] = true : 이미 i는 최단거리가 확정되었다.
                 //Check[i] = false : 아직  i는 최단거리가 확정되지 않았다.

int main(){
    scanf("%d %d %d %d", &n , &m , &start , &end2);
    
    for(int i = 0; i < m; i++){
        int a , b, c; //간선의 정보
        
        scanf("%d %d %d", &a , &b , &c);
        
        //a -- (c)간선 가중치 -- b a와 b가 연결되어있고 c는 가중치
        graph[a].push_back(b);
        graph[b].push_back(a);
        
        cost[a].push_back(c);
        cost[b].push_back(c);
        
        //여기까지 그래프 구현
        
        //graph[1] : 2 6 8 9 //1과 연결된 정점들이 2 6 8 9가 있고
        //cost[1] : 1 1 3 9 // 그때의 간선 가중치
    }
    
    for(int i = 0; i < n; i++) Table[i] = 987987987; 
    //시작점은 최소값을 알고있지만 그 외에는 최단경로를 모름
    //따라서 Table[i]를 큰 값으로 설정해줌
    Table[start] = 0; //초기값 설정
    
    for(int i = 0; i < n; i++){
        //(1) 최소값을 구한다. 단 , 지금까지 최단거리로 확정되지 않았던 정점에 대해서
        //(2) 그 최소값을 갖는 노드로부터 뻗어나간다.
        
        int minValue = 987987987 , minIndex = -1;
        for(int j = 0; j < n; j++){
            if(!Check[j] && minValue > Table[j]){//최단거리로 확정된적이 없으면서
                                                //minValue가 Table[j] 보다 크다면
                minValue = Table[j];
                minIndex = j;
            }
        }
        
        Check[minIndex] = true;
        
        for(int j = 0; j < graph[minIndex].size(); j++){
            int Node2 = graph[minIndex][j];
            int Cost2 = cost[minIndex][j];
            
            //minIndex ---(Cost2) ---Node2
            
            if(Table[Node2] > Table[minIndex] + Cost2){
                Table[Node2] = Table[minIndex] + Cost2;
            }
        }
    }
    for(int i = 0; i < n; i++) printf("%d ", Table[i]); //시작점부터 모든 정점까지 최단거리까지의 값
    //printf("%d\n" , Table[end2]); //최단경로 값
    
    
    return 0;
}
