//8 10 정점의 갯수 , 간선의 갯수
// 1 2 1 시작점 끝점 가중치 3개의 값이 하나의 간선을 정의
// 1 3 2 반대로 말하면 하나의 간선을 이루기 위해서는 3가지 다른 값이 필요
// 2 3 3 이런 상황에서는 구조체 사용하는 것이 좋음
// 2 4 4 
// 4 5 1 
// 4 6 2 
// 5 6 2 
// 5 8 2 
// 6 7 3 
// 7 8 4

//15

#include <cstdio>
#include <vector>
#include <algorithm>

using namespace std;

const int MAX = 100;

struct edge{
  int p; //시작점
  int q; //끝점
  int cost; //가중치
};

int n , m; //정점 갯수 , 간선 갯수
vector <edge> edgeList; //앳지라는 타입을 여러개 저장할수 있는 배열 (배열이름 edgeList)
int parent[MAX]; //parent[x] : x의 부모노드의 번호
int result;

edge makeEdge(int a , int b, int c){
    edge temp;
    
    temp.p = a;
    temp.q = b;
    temp.cost = c;
    
    return temp;
}

bool compare(edge e1, edge e2){
    if(e1.cost < e2.cost) return true;
    else return false;
}

int find(int x){
    if(x == parent[x]) return x; //내가 대표이므로 나를 반환
    else{
        int y = find(parent[x]); //내 부모의 루트를 반환
        parent[x] = y;
        
        return y;
    }
}

bool Union(int a , int b){
    //a와 b가 같은 그룹인지를 판단
    //만약 같은 그룹이라면 false 반환
    //그게 아니라면 a, b를 같은 그룹으로 만들고 true 반환
    
    int rootA = find(a);
    int rootB = find(b);
    
    if(rootA == rootB) return false; //같은 그룹에 있음
    else{
        //같은 그룹이 아니므로 묶어야 한다.
        parent[rootA] = rootB; // 같은 그룹으로 묶어줌
        
        return true;
    }
    
}

int main(){
    //1. 그래프를 입력을 받는다.
    //2. 간선 가중치가 작은 순서대로 정렬을 한다.
    //3. 간선 가중치가 작은 간선부터 차례대로 선택하려는 시도를 해본다.
    // 3-1. 시작점과 끝점이 같은 그룹에 속한다면 , 그냥 넘어간다.
    // 3-2. 그게 아니라면 이 간선을 선택한다.
    //      시작점과 끝점을 같은 그룹으로 만들어준다.
    
    scanf("%d %d" , &n , &m);
    
    for(int i = 1; i <= n; i++) parent[i] = i; //초기화 시켜줌 내 노드의 부모는 나다.
    
    for(int i = 0; i < m; i++){
        int a , b , c;
        
        scanf("%d %d %d", &a , &b , &c); //a,b가 연결되어있고 그때 가중치 c
        
        //edge t; makeEdge덕분에 안써도 됨
        
        //t.p = a;
        //t.q = b;
        //t.cost = c;
        
        edgeList.push_back(makeEdge(a,b,c)); //a,b,c라는 값을 가지는 edge형 변수를 반환해주는 함수 
                                            //makeEdge
    }
    
    sort(edgeList.begin() , edgeList.end() , compare); //구조체를 정렬할 때는
                                                        //구조체 값을 비교할 수 있는 compare 함수를 써주어야 한다.
    
    for(int i = 0; i < m; i++){
        //edgeList[i]의 간선을 선택하려고 시도할 것임
        
        //if(만약 시작점과 끝점이 같은 그룹에 있다면?){
         //   result += edgeList[i].cost;
          //  시작점과 끝점을 같은 그룹으로 묶는다;
          
        if(Union(edgeList[i].p , edgeList[i].q)) //Union 함수는 같은 그룹이 아니라면
            result += edgeList[i].cost;         //같은 그룹으로 묶어줌
          
        
    }
    
    printf("%d\n" , result);
    
    return 0;
}
